import os
import faiss
import numpy as np
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# D√©finition des chemins
EMBEDDINGS_FILE = "output/embeddings.npy"
INDEX_FILE = "output/faiss_index.bin"
OUTPUT_DIR = "output/"

# V√©rification et cr√©ation du dossier de sortie
os.makedirs(OUTPUT_DIR, exist_ok=True)

# V√©rification de l'existence du fichier d'embeddings
if not os.path.exists(EMBEDDINGS_FILE):
    logging.error(f"‚ùå Erreur : Le fichier '{EMBEDDINGS_FILE}' est introuvable. Ex√©cutez d'abord 'generate_embeddings.py'.")
    exit(1)

# Chargement des embeddings
try:
    embeddings = np.load(EMBEDDINGS_FILE)
    
    if embeddings.size == 0:
        logging.error("‚ùå Erreur : Le fichier d'embeddings est vide.")
        exit(1)

    # V√©rification du format des embeddings
    if not np.issubdtype(embeddings.dtype, np.floating):
        logging.error("‚ùå Erreur : Les embeddings doivent √™tre de type float32 ou float64.")
        exit(1)

    # Conversion en float32 pour FAISS
    embeddings = embeddings.astype(np.float32)

except Exception as e:
    logging.error(f"‚ùå Erreur lors du chargement des embeddings : {e}")
    exit(1)

# V√©rification des dimensions des embeddings
if len(embeddings.shape) != 2:
    logging.error("‚ùå Erreur : Les embeddings doivent √™tre un tableau 2D (nb_exemples, dimension).")
    exit(1)

nb_embeddings, embedding_dim = embeddings.shape
logging.info(f"üìä Nombre d'embeddings : {nb_embeddings}, Dimension : {embedding_dim}")

# Cr√©ation d'un index FAISS optimis√©
logging.info("üîÑ Cr√©ation de l'index FAISS...")

try:
    # V√©rifier si un index FAISS existe d√©j√† et s'il est valide
    if os.path.exists(INDEX_FILE):
        try:
            existing_index = faiss.read_index(INDEX_FILE)
            if existing_index.d != embedding_dim:
                logging.warning(f"‚ö†Ô∏è Dimension diff√©rente dans l'index existant ({existing_index.d} au lieu de {embedding_dim}). R√©initialisation de l'index.")
            else:
                logging.info("üîÑ Un index existant a √©t√© trouv√© et sera mis √† jour.")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è L'ancien fichier FAISS est corrompu ou incompatible. Il sera recr√©√©. Erreur : {e}")

    # Cr√©ation de l'index FAISS avec HNSW pour une recherche rapide
    index = faiss.IndexHNSWFlat(embedding_dim, 32)  # 32 voisins dans le graphe

    # Ajout des embeddings √† l'index
    index.add(embeddings)
    logging.info(f"‚úÖ {index.ntotal} embeddings ajout√©s √† l'index FAISS.")

    # Sauvegarde de l'index
    faiss.write_index(index, INDEX_FILE)
    logging.info(f"üíæ Index FAISS sauvegard√© dans '{INDEX_FILE}'.")

except Exception as e:
    logging.error(f"‚ùå Erreur lors de la cr√©ation/sauvegarde de l'index FAISS : {e}")
    exit(1)
