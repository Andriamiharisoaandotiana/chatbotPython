#g√©n√©ratin des embeddings
import os
import json
import numpy as np
from sentence_transformers import SentenceTransformer

# D√©finition des chemins
INPUT_FILE = "output/extracted_texts.json"
OUTPUT_DIR = "output/"
OUTPUT_FILE = os.path.join(OUTPUT_DIR, "embeddings.npy")

# V√©rification et cr√©ation du dossier de sortie
os.makedirs(OUTPUT_DIR, exist_ok=True)

# V√©rification que le fichier extrait existe
if not os.path.exists(INPUT_FILE):
    print(f"‚ùå Erreur : Le fichier '{INPUT_FILE}' n'existe pas. Ex√©cutez d'abord 'extract_text.py'.")
    exit(1)

# Chargement des textes extraits
try:
    with open(INPUT_FILE, "r", encoding="utf-8") as f:
        extracted_texts = json.load(f)
        if not extracted_texts:
            print("‚ùå Erreur : Aucun texte extrait trouv√© dans le fichier JSON.")
            exit(1)
except json.JSONDecodeError:
    print("‚ùå Erreur : Impossible de lire 'extracted_texts.json'. V√©rifiez son contenu.")
    exit(1)

# Initialisation du mod√®le d'embedding
print("üîÑ Chargement du mod√®le CamemBERT...")
model = SentenceTransformer("camembert-base")

# G√©n√©ration des embeddings
embeddings = {}

for filename, text in extracted_texts.items():
    print(f"üîç G√©n√©ration d'embeddings pour {filename}...")
    sentences = text.split("\n")  # D√©couper en phrases pour de meilleurs r√©sultats
    embeddings[filename] = model.encode(sentences, convert_to_numpy=True)

# Conversion en tableau numpy
all_embeddings = np.array([emb for emb_list in embeddings.values() for emb in emb_list])

# Sauvegarde des embeddings
np.save(OUTPUT_FILE, all_embeddings)
print(f"\n‚úÖ Embeddings g√©n√©r√©s et enregistr√©s dans '{OUTPUT_FILE}'.")
